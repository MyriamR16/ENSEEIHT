(* Spécification de la fonction de fibonacci *)

theory Fibonacci

   use int.Int

   function fibonacci(n : int) : int

   axiom fibonacci_zero : true (* A MODIFIER *)

   axiom fibonacci_un : true (* A MODIFIER *)

   axiom fibonacci_suite : true (* A MODIFIER *)

end

(* Implémentation de la fonction factorielle par un algorithme ascendant *)

module FibonacciAscendant

  use int.Int
  use ref.Refint
  use Fibonacci

  let fibonacci_ascendant (n: int) : int
    requires { 0 <= n }
    ensures  { (fibonacci n) = result }
  =
    let i = ref 0 in
    let p = ref 0 in
    let c = ref 0 in
    let s = ref 1 in
    while  (!i < n) do
      invariant { true (* A MODIFIER *) }
      variant   { 0 (* A MODIFIER *) }
      p := (!c);
      c := (!s);
      s := (!c) + (!p);
      i := (!i) + 1
    done;
    !c

end























