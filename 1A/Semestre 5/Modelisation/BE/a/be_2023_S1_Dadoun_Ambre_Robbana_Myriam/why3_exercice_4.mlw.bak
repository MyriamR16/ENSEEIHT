(* Spécification de la fonction de fibonacci *)

theory Fibonacci

   use int.Int

   function fibonacci(n : int) : int

   axiom fibonacci_zero : 0

   axiom fibonacci_un : un

   axiom fibonacci_suite : fibonacci(n) + fibonacci(n-1)

end

(* Implémentation de la fonction factorielle par un algorithme ascendant *)

module FibonacciAscendant

  use int.Int
  use ref.Refint
  use Fibonacci

  let fibonacci_ascendant (n: int) : int
    requires { 0 <= n && fibonacci 0 = 0 && fibonacci 1 =1 }
    ensures  { (fibonacci n) = result }
  =
    let i = ref 0 in
    let p = ref 0 in
    let c = ref 0 in
    let s = ref 1 in
    while  (!i < n) do
      invariant {  (!c) = (fibonacci !i) && (!s) = (fibonacci ((!i)+1)) && n>= (!i) >0}
      variant   { n -(!i)} 
      p := (!c);
      c := (!s);
      s := (!c) + (!p);
      i := (!i) + 1
    done;
    !c

end























